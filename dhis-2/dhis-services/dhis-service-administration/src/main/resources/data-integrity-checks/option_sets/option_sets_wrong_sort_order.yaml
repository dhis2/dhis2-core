# Copyright (c) 2004-2022, University of Oslo
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# Neither the name of the HISP project nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
---
name:  option_sets_wrong_sort_order
description: Option sets with possibly wrong sort order.
section: Option sets
section_order: 3
summary_sql: >-
    WITH option_sets_wrong_sort_order AS (
    SELECT DISTINCT optionsetid, sort_order, expected_order
    FROM (
    SELECT
    optionsetid,
    sort_order,
    row_number() OVER (PARTITION BY optionsetid ORDER BY sort_order)
    + (MIN(sort_order) OVER (PARTITION BY optionsetid) - 1) AS expected_order
    FROM optionvalue
    ) AS foo
    WHERE sort_order != expected_order
    ORDER BY optionsetid, sort_order
    )
    SELECT
    COUNT(*) AS value,
    100 * (SELECT COUNT(*) FROM (SELECT DISTINCT optionsetid FROM option_sets_wrong_sort_order) AS bar) /
    NULLIF((SELECT COUNT(*) FROM optionset), 0) AS percent
    FROM option_sets_wrong_sort_order;
details_sql: >-
    SELECT
    a.uid,
    a.name,
    b.sort_order || ' != ' || b.expected_order AS comment
    FROM optionset a
    INNER JOIN (
    SELECT DISTINCT optionsetid, sort_order, expected_order
    FROM (
    SELECT
    optionsetid,
    sort_order,
    row_number() OVER (PARTITION BY optionsetid ORDER BY sort_order)
    + (MIN(sort_order) OVER (PARTITION BY optionsetid) - 1) AS expected_order
    FROM optionvalue
    ) AS foo
    WHERE sort_order != expected_order
    ORDER BY optionsetid, sort_order
    ) b ON a.optionsetid = b.optionsetid;
details_id_type: optionSets
severity: INFO
introduction: >
    In previous versions of DHIS2, it was important that the sort order of option values in an option set
    not contain any gaps. As an example, consider an option set with options which have sort orders  of 1, 2, 4, 5. 
    This option set appears to have a gap in the sort order, as the sort order 3 is missing.
    In current versions of DHIS2, the sort order of options 
    in an option set is not of particular importance, but for reasons of tidiness, you may want to
    ensure that the sort order is correct. This check identifies any option sets where the sort
    contains gaps.
recommendation: >
    To correct the sort order of an option set, you can open the option set in the maintenance app and
    resort the option set in the user interface to correct the sort order. Save the option set, and the
    sort order will be corrected.