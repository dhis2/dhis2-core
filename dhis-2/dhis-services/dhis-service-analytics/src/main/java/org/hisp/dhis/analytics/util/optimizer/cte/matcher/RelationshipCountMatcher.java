/*
 * Copyright (c) 2004-2025, University of Oslo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the HISP project nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.hisp.dhis.analytics.util.optimizer.cte.matcher;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.expression.Function;
import net.sf.jsqlparser.expression.StringValue;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.relational.EqualsTo;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.select.FromItem;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.SubSelect;
import org.hisp.dhis.analytics.util.optimizer.cte.data.FoundSubSelect;

/**
 * Matcher for a relationship count query generated by this class: {@see
 * org.hisp.dhis.program.function.D2RelationshipCount}
 */
public class RelationshipCountMatcher extends AbstractCountMatcher {

  /** Record to store aggregation information for the query. */
  private record AggregationInfo(boolean isAggregated) {}

  /** Record to store relationship type information from WHERE clause. */
  private record WhereClauseInfo(String relationshipTypeUid) {}

  /**
   * Tries to match a SubSelect query to identify relationship count patterns. The method validates
   * various components of the query including FROM clause, SELECT expression, and WHERE conditions
   * to determine if it matches the expected pattern.
   *
   * @param subSelect the SubSelect query to analyze
   * @return Optional containing FoundSubSelect if the pattern matches, empty Optional otherwise
   */
  @Override
  public Optional<FoundSubSelect> match(SubSelect subSelect) {
    Optional<PlainSelect> maybePlain = asPlainSelect(subSelect);
    if (maybePlain.isEmpty()) {
      return Optional.empty();
    }
    PlainSelect plain = maybePlain.get();

    if (!isValidFromClause(plain.getFromItem())) {
      return Optional.empty();
    }

    Optional<Expression> selectExpr = getSingleExpression(plain);
    if (selectExpr.isEmpty()) {
      return Optional.empty();
    }

    Optional<AggregationInfo> aggregationInfo = validateSelectExpression(selectExpr.get());
    if (aggregationInfo.isEmpty()) {
      return Optional.empty();
    }

    Optional<WhereClauseInfo> whereInfo = validateWhereClause(plain.getWhere());
    if (whereInfo.isEmpty()) {
      return Optional.empty();
    }

    return buildFoundSubSelect(subSelect, aggregationInfo.get(), whereInfo.get());
  }

  /**
   * Validates that the FROM clause references the analytics_rs_relationship table.
   *
   * @param fromItem the FROM clause item to validate
   * @return true if the FROM clause is valid, false otherwise
   */
  private boolean isValidFromClause(FromItem fromItem) {
    return fromItem instanceof Table table
        && table.getName().toLowerCase().contains("analytics_rs_relationship");
  }

  /**
   * Validates the SELECT expression to determine if it's either a direct relationship_count column
   * reference or an aggregated sum of relationship_count.
   *
   * @param selectExpr the expression to validate
   * @return Optional containing AggregationInfo if valid, empty Optional otherwise
   */
  private Optional<AggregationInfo> validateSelectExpression(Expression selectExpr) {
    if (selectExpr instanceof Function func) {
      return validateFunctionExpression(func);
    } else if (selectExpr instanceof Column col) {
      return validateColumnExpression(col);
    }
    return Optional.empty();
  }

  /**
   * Validates a function expression to ensure it's a sum of relationship_count.
   *
   * @param func the function to validate
   * @return Optional containing AggregationInfo if valid, empty Optional otherwise
   */
  private Optional<AggregationInfo> validateFunctionExpression(Function func) {
    if (!"sum".equalsIgnoreCase(func.getName())
        || func.getParameters() == null
        || func.getParameters().getExpressions().size() != 1) {
      return Optional.empty();
    }

    Expression sumParam = func.getParameters().getExpressions().get(0);
    if (!(sumParam instanceof Column col)
        || !"relationship_count".equalsIgnoreCase(col.getColumnName())) {
      return Optional.empty();
    }
    return Optional.of(new AggregationInfo(true));
  }

  /**
   * Validates a column expression to ensure it's a relationship_count column.
   *
   * @param col the column to validate
   * @return Optional containing AggregationInfo if valid, empty Optional otherwise
   */
  private Optional<AggregationInfo> validateColumnExpression(Column col) {
    if (!"relationship_count".equalsIgnoreCase(col.getColumnName())) {
      return Optional.empty();
    }
    return Optional.of(new AggregationInfo(false));
  }

  /**
   * Validates the WHERE clause to ensure it contains the required conditions.
   *
   * @param where the WHERE clause expression to validate
   * @return Optional containing WhereClauseInfo if valid, empty Optional otherwise
   */
  private Optional<WhereClauseInfo> validateWhereClause(Expression where) {
    if (where == null) {
      return Optional.empty();
    }

    if (where instanceof EqualsTo equals) {
      return isValidTrackedEntityComparison(equals)
          ? Optional.of(new WhereClauseInfo(null))
          : Optional.empty();
    }

    if (where instanceof AndExpression and) {
      return validateAndExpression(and);
    }

    return Optional.empty();
  }

  /**
   * Validates an AND expression in the WHERE clause to ensure it contains both tracked entity
   * comparison and relationship type conditions.
   *
   * @param and the AND expression to validate
   * @return Optional containing WhereClauseInfo if valid, empty Optional otherwise
   */
  private Optional<WhereClauseInfo> validateAndExpression(AndExpression and) {
    Expression left = and.getLeftExpression();
    Expression right = and.getRightExpression();

    if (!(left instanceof EqualsTo equalsLeft && isValidTrackedEntityComparison(equalsLeft))) {
      return Optional.empty();
    }

    if (!(right instanceof EqualsTo relationshipTypeEquals)) {
      return Optional.empty();
    }

    return extractRelationshipTypeUid(relationshipTypeEquals);
  }

  /**
   * Extracts the relationship type UID from an equals expression.
   *
   * @param relationshipTypeEquals the equals expression to process
   * @return Optional containing WhereClauseInfo if valid, empty Optional otherwise
   */
  private Optional<WhereClauseInfo> extractRelationshipTypeUid(EqualsTo relationshipTypeEquals) {
    Expression typeLeft = relationshipTypeEquals.getLeftExpression();
    Expression typeRight = relationshipTypeEquals.getRightExpression();

    if (!(typeLeft instanceof Column typeCol)
        || !"relationshiptypeuid".equalsIgnoreCase(typeCol.getColumnName())) {
      return Optional.empty();
    }

    String relationshipTypeUid = null;
    if (typeRight instanceof StringValue stringValue) {
      relationshipTypeUid = stringValue.getValue();
    }

    return Optional.of(new WhereClauseInfo(relationshipTypeUid));
  }

  /**
   * Builds the final FoundSubSelect result with the collected information.
   *
   * @param subSelect the original SubSelect query
   * @param aggregationInfo information about aggregation type
   * @param whereInfo information from WHERE clause
   * @return Optional containing the constructed FoundSubSelect
   */
  private Optional<FoundSubSelect> buildFoundSubSelect(
      SubSelect subSelect, AggregationInfo aggregationInfo, WhereClauseInfo whereInfo) {
    String cteName =
        aggregationInfo.isAggregated() ? "relationship_count_agg" : "relationship_count";

    Map<String, String> metadata = new HashMap<>();
    if (whereInfo.relationshipTypeUid() != null) {
      metadata.put("relationshipTypeUid", whereInfo.relationshipTypeUid());
    }
    metadata.put("isAggregated", String.valueOf(aggregationInfo.isAggregated()));

    return Optional.of(new FoundSubSelect(cteName, subSelect, "relationship_count", metadata));
  }

  /**
   * Validates the tracked entity comparison condition. Expected: trackedentityid = ax.trackedentity
   * OR trackedentityid = subax.trackedentity.
   *
   * @param equals the EqualsTo expression.
   * @return true if the expression matches the expected comparison.
   */
  private boolean isValidTrackedEntityComparison(EqualsTo equals) {
    Expression left = equals.getLeftExpression();
    Expression right = equals.getRightExpression();

    if (!(left instanceof Column leftCol && right instanceof Column rightCol)) {
      return false;
    }

    return "trackedentityid".equalsIgnoreCase(leftCol.getColumnName())
        && rightCol.getTable() != null
        && ("ax".equalsIgnoreCase(rightCol.getTable().getName())
            || "subax".equalsIgnoreCase(rightCol.getTable().getName()))
        && "trackedentity".equalsIgnoreCase(rightCol.getColumnName());
  }
}
