# syntax=docker/dockerfile:1
# Dockerfile to build the DB dump into the Docker image with the database pre-initialized
# to speed up container startup time.
ARG POSTGRES_BASE_IMAGE=ghcr.io/baosystems/postgis:14-3.5
ARG DB_TYPE
ARG DB_VERSION

FROM amazon/aws-cli:latest AS downloader
ARG DB_TYPE
ARG DB_VERSION
WORKDIR /tmp

RUN S3_PATH="s3://databases.dhis2.org/${DB_TYPE}/${DB_VERSION}/dhis2-db-${DB_TYPE}.sql.gz" && \
    echo "Downloading from: $S3_PATH" && \
    aws s3 cp --no-sign-request "$S3_PATH" dump.sql.gz

FROM ${POSTGRES_BASE_IMAGE}

ENV POSTGRES_USER=dhis \
    POSTGRES_DB=dhis \
    POSTGRES_PASSWORD=dhis \
    PGUSER=dhis \
    PGDATABASE=dhis \
    PGPASSWORD=dhis

# Copy the dump file
COPY --from=downloader /tmp/dump.sql.gz /tmp/dump.sql.gz

# Initialize the database during build
RUN set -eux; \
# Create data directory if it doesn't exist
mkdir -p /var/lib/postgresql/data; \
chown postgres:postgres /var/lib/postgresql/data; \
# Initialize the database cluster
gosu postgres initdb -D /var/lib/postgresql/data; \
# Start PostgreSQL in background
gosu postgres pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start; \
# Wait for PostgreSQL to be ready
until gosu postgres pg_isready -h localhost -p 5432; do sleep 1; done; \
# Create the dhis user and database
PGUSER=postgres gosu postgres psql -c "CREATE USER dhis WITH PASSWORD 'dhis';" postgres; \
PGUSER=postgres gosu postgres psql -c "CREATE DATABASE dhis OWNER dhis;" postgres; \
PGUSER=postgres gosu postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE dhis TO dhis;" postgres; \
# Restore the database dump
echo "Restoring database dump..."; \
PGUSER=postgres gunzip -c /tmp/dump.sql.gz | gosu postgres psql -d dhis; \
# Stop PostgreSQL
gosu postgres pg_ctl -D /var/lib/postgresql/data stop; \
# Clean up the dump file
rm /tmp/dump.sql.gz
