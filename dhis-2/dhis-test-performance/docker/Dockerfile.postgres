# syntax=docker/dockerfile:1
# Multi-stage build: downloads and restores DHIS2 database dump at build time to eliminate runtime
# restore overhead in performance tests.
ARG DB_TYPE
ARG DB_VERSION

# Stage 1: Download database dump from S3
FROM amazon/aws-cli:latest AS downloader
ARG DB_TYPE
ARG DB_VERSION
WORKDIR /tmp

RUN S3_PATH="s3://databases.dhis2.org/${DB_TYPE}/${DB_VERSION}/dhis2-db-${DB_TYPE}.sql.gz" && \
    echo "Downloading from: $S3_PATH" && \
    aws s3 cp --no-sign-request "$S3_PATH" dump.sql.gz

# Stage 2: Restore database dump into PostgreSQL
FROM ghcr.io/baosystems/postgis:14-3.5 AS restorer

# Ensure build cache is invalidated when DB_TYPE or DB_VERSION changes so dump is restored
ARG DB_TYPE
ARG DB_VERSION

# Override PGDATA to avoid VOLUME path. Base image defines /var/lib/postgresql/data as VOLUME, which
# prevents docker commit from capturing data. run-simulation.sh uses docker commit to persist
# analytics tables, so we use /var/lib/postgresql/pgdata instead.
ENV POSTGRES_USER=dhis \
    POSTGRES_DB=dhis \
    POSTGRES_PASSWORD=dhis \
    PGDATA=/var/lib/postgresql/pgdata \
    PGUSER=dhis \
    PGDATABASE=dhis \
    PGPASSWORD=dhis

COPY --from=downloader /tmp/dump.sql.gz /tmp/dump.sql.gz

COPY docker-entrypoint-build.sh /usr/local/bin/
# Uses a modified version of the official PostgreSQL docker-entrypoint.sh to initialize the database
# and restore the dump at build time instead of runtime
RUN chmod +x /usr/local/bin/docker-entrypoint-build.sh && \
    gosu postgres /usr/local/bin/docker-entrypoint-build.sh

# Stage 3: Final image with pre-populated database
FROM ghcr.io/baosystems/postgis:14-3.5 AS final

# Override PGDATA to avoid VOLUME path (must match restorer stage). Enables docker commit in
# run-simulation.sh to persist analytics tables
ENV POSTGRES_USER=dhis \
    POSTGRES_DB=dhis \
    POSTGRES_PASSWORD=dhis \
    PGDATA=/var/lib/postgresql/pgdata \
    PGUSER=dhis \
    PGDATABASE=dhis \
    PGPASSWORD=dhis

COPY --from=restorer --chown=postgres:postgres /var/lib/postgresql/pgdata /var/lib/postgresql/pgdata

