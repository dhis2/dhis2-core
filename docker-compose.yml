x-web-base: &web-base
  image: "${DHIS2_IMAGE:-dhis2/core-dev:local}"
  volumes:
    - ./docker/log4j2.xml:/opt/dhis2/log4j2.xml:ro
  environment:
    JAVA_OPTS:
      "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081 \
      -Dlog4j2.configurationFile=/opt/dhis2/log4j2.xml
      -Dcom.sun.management.jmxremote \
      -Dcom.sun.management.jmxremote.port=9011 \
      -Dcom.sun.management.jmxremote.local.only=false \
      -Dcom.sun.management.jmxremote.authenticate=false \
      -Dcom.sun.management.jmxremote.ssl=false"

x-db-base: &db-base
  image: ghcr.io/baosystems/postgis:12-3.3
  # uncomment to enable query logging
  # command:
  #   ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
  volumes:
    - db-dump:/docker-entrypoint-initdb.d/
  environment:
    POSTGRES_USER: dhis
    POSTGRES_DB: dhis
    POSTGRES_PASSWORD: &postgres_password dhis
    PGPASSWORD: *postgres_password # needed by psql in healthcheck
  healthcheck:
    test:
      [
        "CMD-SHELL",
        'psql --no-password --quiet --username $$POSTGRES_USER postgres://127.0.0.1/$$POSTGRES_DB -p 5432 --command "SELECT ''ok''" > /dev/null',
      ]
    start_period: 120s
    interval: 1s
    timeout: 3s
    retries: 5
  depends_on:
    db-dump:
      condition: service_completed_successfully # make sure the DB dump has been downloaded

services:
  web:
    <<: *web-base
    volumes:
      - ./docker/dhis.conf:/opt/dhis2/dhis.conf:ro
    ports:
      # - "127.0.0.1:8080:8080" # DHIS2
      - "127.0.0.1:8081:8081" # Debugger: connect using commandline flag -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081
      - "127.0.0.1:9011:9011" # JMX port (for example for VisualVM)
    depends_on:
      db:
        condition: service_healthy

  db:
    <<: *db-base
    ports:
      - "127.0.0.1:5432:5432"

  # Test synchronizing data and metadata between two DHIS2 instances
  # Run
  #   docker compose --profile sync up

  web-sync:
    <<: *web-base
    volumes:
      - ./docker/dhis-sync.conf:/opt/dhis2/dhis.conf:ro
    profiles: [sync]
    ports:
      - "127.0.0.1:8082:8080" # DHIS2
      - "127.0.0.1:8083:8081" # Debugger: connect using commandline flag -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8083
      - "127.0.0.1:9012:9010" # JMX port (for example for VisualVM)
    depends_on:
      db-sync:
        condition: service_healthy

  db-sync:
    <<: *db-base
    profiles: [sync]
    ports:
      - "127.0.0.1:5434:5432"

  db-dump:
    image: busybox # busybox wget version does not have --no-clobber, so we need to do the [ -f ] test
    command: sh -c '[ -f dump.sql.gz ] && echo "dump.sql.gz exists" || wget --output-document dump.sql.gz $$DHIS2_DB_DUMP_URL' # only download file if it does not exist
    environment:
      DHIS2_DB_DUMP_URL: "${DHIS2_DB_DUMP_URL:-https://databases.dhis2.org/sierra-leone/dev/dhis2-db-sierra-leone.sql.gz}"
    working_dir: /opt/dump
    volumes:
      - db-dump:/opt/dump

  nginx:
    image: nginx
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - web

  setup:
    profiles: [logs]
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    profiles: [logs]
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    profiles: [logs]
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  vector:
    profiles: [logs]
    image: timberio/vector:0.46.1-alpine
    command:
      ["-c", "/etc/vector/vector.toml"]
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./docker/vector.toml:/etc/vector/vector.toml:ro
      - type: volume
        source: nginx-logs
        target: /var/log/nginx
      # mount CA certificate for secure Elasticsearch communication
      - certs:/etc/vector/certs:ro
    depends_on:
      nginx:
        condition: service_started
      es01:
        condition: service_healthy

volumes:
  db-dump: {}
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  nginx-logs:
    driver: local
