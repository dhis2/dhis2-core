pipeline {
    agent {
        label 'large'
    }
    options {
        disableConcurrentBuilds()
    }

    environment {
        DHIS2_VERSION = ''
        DOCKER_HUB_CORE_REPOSITORY = "${DOCKER_HUB_OWNER}/core-dev"
        DOCKER_HUB_BASE_REPOSITORY = "${DOCKER_HUB_OWNER}/base-dev"
        DOCKER_IMAGE_TAG = ''
        DOCKER_CORE_IMAGE_FULL_NAME = ''
        DOCKER_BASE_IMAGE_FULL_NAME = ''
        COMPOSE_PARAMETER = ''
        TESTS_IMAGE_NAME = 'core-api-tests'
    }

    stages {
        stage('Prepare env for release deployment') {
            when {
                buildingTag()
            }
            steps {
                script {
                    DOCKER_HUB_CORE_REPOSITORY = "${DOCKER_HUB_OWNER}/core"
                    DOCKER_HUB_BASE_REPOSITORY = "${DOCKER_HUB_OWNER}/base"

                    pom = readMavenPom file: 'dhis-2/pom.xml'
                    DHIS2_VERSION = pom.version.toLowerCase()

                    echo "DHIS2 version: ${DHIS2_VERSION}"

                    DOCKER_IMAGE_TAG = "${DHIS2_VERSION}"
                }
            }
        }

        stage('Prepare env for dev deployment') {
            when {
                not {
                    buildingTag()
                }
            }

            steps {
                script {
                    def branchName = "${env.BRANCH_NAME}"

                    DOCKER_IMAGE_TAG = branchName;

                    if ( branchName.contains('/') ) {
                        DOCKER_IMAGE_TAG = branchName.split('/')[1]
                    }

                    if ( branchName.startsWith('patch/') ) {
                        DOCKER_IMAGE_TAG += '-rc'
                    }
                }
            }
        }

        stage('Prepare Docker compose') {
            steps {
                script {
                    COMPOSE_PARAMETER = "${env.JOB_NAME}"
                    echo "Docker compose parameter: ${COMPOSE_PARAMETER}"
                }
            }
        }

        stage('Build image') {
            steps {
                script {
                    DOCKER_BASE_IMAGE_FULL_NAME = "${DOCKER_HUB_BASE_REPOSITORY}:${DOCKER_IMAGE_TAG}"
                    echo "Will tag base image as ${DOCKER_BASE_IMAGE_FULL_NAME}"

                    sh "docker build -t ${DOCKER_BASE_IMAGE_FULL_NAME} --build-arg IDENTIFIER=${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Build containers') {
            steps {
                script {
                    DOCKER_CORE_IMAGE_FULL_NAME = "${DOCKER_HUB_CORE_REPOSITORY}:${DOCKER_IMAGE_TAG}"
                    echo "Will tag container images as ${DOCKER_CORE_IMAGE_FULL_NAME}"

                    sh "./docker/extract-artifacts.sh ${DOCKER_BASE_IMAGE_FULL_NAME}"
                    sh "./docker/build-containers.sh ${DOCKER_CORE_IMAGE_FULL_NAME} ${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Run api tests') {
            matrix {
                axes {
                    axis {
                        name 'DOCKER_VARIANT'
                        values '-tomcat-8.5-jdk8-openjdk-slim', '-tomcat-9.0.27-jdk11-openjdk-slim'
                    }
                }
                stages {
                    stage('Start instance') {
                        steps {
                            script {
                                dir("dhis-2/dhis-e2e-test") {
                                    sh "IMAGE_NAME=${DOCKER_CORE_IMAGE_FULL_NAME}${DOCKER_VARIANT} docker-compose -p ${COMPOSE_PARAMETER}${DOCKER_VARIANT} up -d"
                                }
                            }
                        }
                    }
                    stage('Run tests') {
                        steps {
                            script {
                                def tests_image_full_name = "${TESTS_IMAGE_NAME}:${DOCKER_IMAGE_TAG}${DOCKER_VARIANT}"

                                dir("dhis-2/dhis-e2e-test") {
                                    sh "docker build -t ${tests_image_full_name} ."
                                    sh "IMAGE_NAME=${tests_image_full_name} docker-compose -p ${COMPOSE_PARAMETER}${DOCKER_VARIANT} -f docker-compose.e2e.yml up --exit-code-from e2e-test"
                                }
                            }
                        }


                        post {
                            failure {
                                script {
                                    dir("dhis-2/dhis-e2e-test") {
                                        sh "docker-compose -p ${COMPOSE_PARAMETER}${DOCKER_VARIANT} logs web > ${DOCKER_VARIANT}logs.txt"
                                        archiveArtifacts artifacts: "${DOCKER_VARIANT}logs.txt"
                                    }
                                }
                            }
                            cleanup {
                                script {
                                    def tests_image_full_name = "${TESTS_IMAGE_NAME}:${DOCKER_IMAGE_TAG}${DOCKER_VARIANT}"
                                    dir("dhis-2/dhis-e2e-test") {
                                        sh "IMAGE_NAME=${DOCKER_CORE_IMAGE_FULL_NAME} docker-compose -p ${COMPOSE_PARAMETER}${DOCKER_VARIANT} down -v --remove-orphans"
                                        sh "IMAGE_NAME=${tests_image_full_name} docker-compose -f docker-compose.e2e.yml -p ${COMPOSE_PARAMETER}${DOCKER_VARIANT} down --rmi all -v --remove-orphans"
                                    }
                                }

                            }
                        }
                    }

                }
            }
        }
        stage('Publish images') {
            steps {
                withDockerRegistry([credentialsId: "docker-hub-credentials", url: ""]) {
                    sh "docker push ${DOCKER_BASE_IMAGE_FULL_NAME}"
                    sh "./docker/publish-containers.sh ${DOCKER_CORE_IMAGE_FULL_NAME}"
                }
            }
        }


    }




    post {
        always {
            sh "docker image rm -f ${DOCKER_BASE_IMAGE_FULL_NAME}"
            sh "./docker/cleanup-images.sh ${DOCKER_CORE_IMAGE_FULL_NAME}"

            sh "docker image prune --force --filter label=identifier=${DOCKER_IMAGE_TAG}"
        }

        failure {
            slackSend(
                    color: '#ff0000',
                    message: 'Publishing of docker images for branch ' + env.BRANCH_NAME + ' failed. Visit ' + env.BUILD_URL + ' for more information',
                    channel: 'jenkins'
            )
        }
    }
}

