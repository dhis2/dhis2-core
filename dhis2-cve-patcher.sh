#!/bin/bash

# GLOBALS
# ---
PATCH_FOLDER=".patches/security"
PATCH_FILE="${PATCH_FOLDER}/advisories.json"
REMOTE_PATCH_FILE="https://raw.githubusercontent.com/dhis2/dhis2-server-setup/master/ci/patches/security/advisories.json"
PATCH_APPLIED_FOLDER="${PATCH_FOLDER}/applied"
# possible status values for CVEs: DRAFT,FIXED,MERGED
ALLOW_DRAFT=${ALLOW_DRAFT_OVERRIDE:-0}   # We may wish to allow DRAFT patches for dev builds

# ENV VARIABLES
# ---
# GITHUB_USER
# GITHUB_TOKEN


# REQUIRES
# ---
# jq, git, hub


echo "
+-------------------------------------------------------------------------------------------------------------------+

  ______________ _____       ______      ___________    ___________                 _____      ______
  ______  /__  /____(_)________|__ \     __  ____/_ |  / /__  ____/  ______________ __  /_________  /______________
  _  __  /__  __ \_  /__  ___/___/ /     _  /    __ | / /__  __/     ___  __ \  __ \`/  __/  ___/_  __ \  _ \_  ___/
  / /_/ / _  / / /  / _(__  )_  __/      / /___  __ |/ / _  /___     __  /_/ / /_/ // /_ / /__ _  / / /  __/  /
  \__,_/  /_/ /_//_/  /____/ /____/      \____/  _____/  /_____/     _  .___/\__,_/ \__/ \___/ /_/ /_/\___//_/
                                                                     /_/

  ============================= BUILD-TIME PATCHING FOR UNDISCLOSED SECURITY ADVISORIES ============================
"

# Get the list of security patches from file
curl ${REMOTE_PATCH_FILE} --create-dirs --silent --output ${PATCH_FILE}

if [ -f  ${PATCH_FILE} ]; then
    echo "  Processing advisories file..."

    # Loop through all CVEs
    TOTAL_CVES=$(jq ".cves | length" ${PATCH_FILE})
    for ((i = 0; i < TOTAL_CVES; i++)); do
        # get attributes of the CVE from thte file
        read cveID privateForkUrl status pullRequests < <(echo $(jq ".cves[$i] | .cveID, .privateForkUrl, .status, .pullRequests" $PATCH_FILE))
        cve=${cveID//\"/}
        applicable=0

        if [ -f ${PATCH_APPLIED_FOLDER}/${cve} ];then
            # don't try to apply the same patch twice
            echo "  $cve| ALREADY APPLIED"
            continue
        fi

        # Loop through pull requests to see if any are applicable
        TOTAL_PRS=$(echo "${pullRequests}" | jq ". | length")
        for ((p = 0; p < TOTAL_PRS; p++)); do
            # Get attributes of the pull request
            read target prStatus prNumber mergeCommit < <(echo $(echo "$pullRequests" | jq ".[$p] | .target, .status, .prNumber, .mergeCommit"))
            if [ ${prStatus} == null ]; then
                # If the PR doesn't have a status, use the status from the main CVE
                prStatus=${status}
            fi
            # Check that status is FIXED or status is DRAFT and DRAFT is allowed for this build
            if [[ ${prStatus//\"/} == "FIXED" || ( ${prStatus//\"/} == "DRAFT" && ${ALLOW_DRAFT} == 1 ) ]]; then

                # check that the current branch is the correct target
                currentBranch=$(git branch -r --contains $(git rev-parse HEAD) | sed 's/ *origin\///g' | head -1)

                if [ "${target//\"/}" == "${currentBranch}" ]; then
                    # This PR is targeting the correct branch so should be applied
                    if [ ${applicable} == 0 ]; then
                        echo "  $cve| APPLICABLE"
                        applicable=1
                    fi

                    echo -n "                | Applying patch: hub apply --3way ${privateForkUrl//\"/}/pull/${prNumber}..."
                    hub apply --3way ${privateForkUrl//\"/}/pull/${prNumber}
                    returnCode=$?
                    if [ ${returnCode} != 0 ]; then
                        echo "\n                | Failed to apply security patch. Exiting."
                        exit 1
                    else
                        echo " done."
                        mkdir -p ${PATCH_APPLIED_FOLDER}
                        echo "PATCH: ${privateForkUrl//\"/}/pull/${prNumber}\nSTATUS: ${prStatus//\"/}" > ${PATCH_APPLIED_FOLDER}/${cve}
                    fi
                fi
            fi
        done

        if [ $applicable == 0 ]; then
            echo "  ${cve}| NOT-APPLICABLE"
        fi

    done

else
    echo "  No advisories file found for this repository. Exiting."
fi

echo "
+-------------------------------------------------------------------------------------------------------------------+"
