# Performance test workflow to compare a baseline against a candidate DHIS2 version
#
# This workflow accepts .env file format as input to overcome GitHub Actions' 10-input limit.
# The baseline_env and candidate_env inputs accept any environment variables that run-simulation.sh
# supports (see dhis-2/dhis-test-performance/run-simulation.sh).
#
# After each test run, run-simulation.sh generates a run-simulation.env file containing all
# the inputs used plus metadata. You can use this file to reproduce runs or as a template
# for new runs.
#
# USAGE EXAMPLES
# ==============
#
# Basic example with required env vars:
#
# gh workflow run run-performance-tests.yml \
#   --field perf_tests_git_ref="master" \
#   --field baseline_env="DHIS2_IMAGE=dhis2/core-dev:latest
# SIMULATION_CLASS=org.hisp.dhis.test.tracker.TrackerTest
# DB_TYPE=sierra-leone
# DB_VERSION=dev" \
#   --field candidate_env="DHIS2_IMAGE=dhis2/core-dev:latest
# SIMULATION_CLASS=org.hisp.dhis.test.tracker.TrackerTest
# DB_TYPE=sierra-leone
# DB_VERSION=dev"
#
# Analytics test with ANALYTICS_GENERATE:
#
# gh workflow run run-performance-tests.yml \
#   --field perf_tests_git_ref="master" \
#   --field baseline_env='DHIS2_IMAGE=dhis2/core:2.42.0
# SIMULATION_CLASS=org.hisp.dhis.test.raw.GetRawSpeedTest
# DB_TYPE=hmis
# DB_VERSION=2.42
# DHIS2_USERNAME=qadmin
# DHIS2_PASSWORD=!Qadmin123S
# MVN_ARGS="-Dscenario=test-scenarios/hmis/analytics-ev-query-speed-get-test.json -Dversion=42.0 -Dbaseline=42.0"
# ANALYTICS_GENERATE=true
# ANALYTICS_TIMEOUT=7200' \
#   --field candidate_env='DHIS2_IMAGE=dhis2/core:2.42.1
# SIMULATION_CLASS=org.hisp.dhis.test.raw.GetRawSpeedTest
# DB_TYPE=hmis
# DB_VERSION=2.42
# DHIS2_USERNAME=qadmin
# DHIS2_PASSWORD=!Qadmin123S
# MVN_ARGS="-Dscenario=test-scenarios/hmis/analytics-ev-query-speed-get-test.json -Dversion=42.1 -Dbaseline=42.0"
# ANALYTICS_GENERATE=true
# ANALYTICS_TIMEOUT=7200'
#
# REPRODUCING FROM PREVIOUS RUNS
# ===============================
#
# Download artifacts from a previous run and use the generated run-simulation.env files.
# You can pass the files directly using @ syntax:
#
# gh workflow run run-performance-tests.yml \
#   --field perf_tests_git_ref="master" \
#   --field baseline_env=@baseline-dir/run-simulation.env \
#   --field candidate_env=@candidate-dir/run-simulation.env
#
name: Performance tests
run-name: Performance test ${{ inputs.perf_tests_git_ref }}

on:
  workflow_dispatch:
    inputs:
      perf_tests_git_ref:
        description: 'Git ref (tag/branch/commit) to checkout dhis2-core performance tests'
        required: true
        type: string
      baseline_env:
        description: |
          Baseline configuration in .env file format (multiline).
          Required: DHIS2_IMAGE, SIMULATION_CLASS
          Optional: All run-simulation.sh env vars (MVN_ARGS, PROF_ARGS, WARMUP, CAPTURE_SQL_LOGS, ANALYTICS_GENERATE, etc.)
          Example:
          DHIS2_IMAGE=dhis2/core:2.42.1
          SIMULATION_CLASS=org.hisp.dhis.test.tracker.TrackerTest
          DB_TYPE=sierra-leone
          DB_VERSION=2.42
          WARMUP=1
        required: true
        type: string
      candidate_env:
        description: |
          Candidate configuration in .env file format (multiline).
          Required: DHIS2_IMAGE, SIMULATION_CLASS (must match baseline)
          Optional: All run-simulation.sh env vars (MVN_ARGS, PROF_ARGS, WARMUP, CAPTURE_SQL_LOGS, ANALYTICS_GENERATE, etc.)
          Example:
          DHIS2_IMAGE=dhis2/core-dev:latest
          SIMULATION_CLASS=org.hisp.dhis.test.tracker.TrackerTest
          DB_TYPE=sierra-leone
          DB_VERSION=dev
          WARMUP=1
        required: true
        type: string

jobs:
  performance-tests:
    runs-on: perf
    timeout-minutes: 90
    defaults:
      run:
        working-directory: dhis-2/dhis-test-performance

    steps:
    - name: Checkout performance tests
      id: checkout
      uses: actions/checkout@v5
      with:
        ref: ${{ inputs.perf_tests_git_ref }}
        sparse-checkout: |
          dhis-2/dhis-test-performance

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # run-simulation.sh should cleanup after itself, this is to ensure the self-hosted runner is clean in case it did not.
    - name: Cleanup containers
      run: docker compose --file docker-compose.yml --file docker-compose.profile.yml down --volumes

    - name: Clean target directory
      run: mvn clean

    - name: Validate environment configurations
      run: |
        # Extract SIMULATION_CLASS from both env configs
        BASELINE_SIM=$(echo "${{ inputs.baseline_env }}" | grep "^SIMULATION_CLASS=" | cut -d= -f2-)
        CANDIDATE_SIM=$(echo "${{ inputs.candidate_env }}" | grep "^SIMULATION_CLASS=" | cut -d= -f2-)

        # Validate SIMULATION_CLASS matches between baseline and candidate
        # This is a workflow constraint - both runs must test the same simulation
        if [ -z "$BASELINE_SIM" ]; then
          echo "Error: SIMULATION_CLASS is required in baseline_env"
          exit 1
        fi
        if [ -z "$CANDIDATE_SIM" ]; then
          echo "Error: SIMULATION_CLASS is required in candidate_env"
          exit 1
        fi
        if [ "$BASELINE_SIM" != "$CANDIDATE_SIM" ]; then
          echo "Error: SIMULATION_CLASS must be the same for baseline and candidate"
          echo "  Baseline: $BASELINE_SIM"
          echo "  Candidate: $CANDIDATE_SIM"
          exit 1
        fi

        echo "✓ Validation passed"
        echo "  SIMULATION_CLASS: $BASELINE_SIM"

    - name: Run performance tests - baseline
      run: |
        # Write baseline env to file
        cat > baseline.env << 'ENV_EOF'
        ${{ inputs.baseline_env }}
        ENV_EOF

        # Source the env file (set -a exports all variables)
        set -a
        source baseline.env
        set +a

        # Override/append workflow-specific settings
        # Skip baseline assertion failures to allow tightening performance thresholds based on candidate improvements
        if [ -n "${MVN_ARGS:-}" ]; then
          export MVN_ARGS="$MVN_ARGS -Dgatling.failOnError=false"
        else
          export MVN_ARGS="-Dgatling.failOnError=false"
        fi
        export REPORT_SUFFIX="baseline"

        ./run-simulation.sh

    - name: Run performance tests - candidate
      run: |
        # Write candidate env to file
        cat > candidate.env << 'ENV_EOF'
        ${{ inputs.candidate_env }}
        ENV_EOF

        # Source the env file (set -a exports all variables)
        set -a
        source candidate.env
        set +a

        # Override workflow-specific settings
        export REPORT_SUFFIX="candidate"

        ./run-simulation.sh

    - name: Upload Gatling report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gatling-report-${{ github.run_id }}-${{ github.sha }}
        path: dhis-2/dhis-test-performance/target/gatling/

    - name: Create job summary
      if: always()
      run: |
        # Read metadata from run-simulation.env files
        BASELINE_ENV=$(find target/gatling -path "*-baseline/run-simulation.env" 2>/dev/null | head -n1)
        CANDIDATE_ENV=$(find target/gatling -path "*-candidate/run-simulation.env" 2>/dev/null | head -n1)

        # Check if candidate env exists - if not, we cannot generate a full summary
        if [ ! -f "$CANDIDATE_ENV" ]; then
          echo "# ⚠️ Performance Test Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The candidate performance test run failed before generating results." >> $GITHUB_STEP_SUMMARY
          echo "This typically indicates an execution error (not an assertion failure)." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs above for error details." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        # Parse candidate env (use this for shared metadata to get the actual MVN_ARGS)
        CANDIDATE_IMAGE=$(grep "^DHIS2_IMAGE=" "$CANDIDATE_ENV" | cut -d= -f2-)
        CANDIDATE_VERSION=$(grep "^DHIS2_VERSION=" "$CANDIDATE_ENV" | cut -d= -f2-)
        CANDIDATE_BRANCH=$(grep "^DHIS2_BUILD_BRANCH=" "$CANDIDATE_ENV" | cut -d= -f2-)
        CANDIDATE_REVISION=$(grep "^DHIS2_BUILD_REVISION=" "$CANDIDATE_ENV" | cut -d= -f2-)
        CANDIDATE_DIGEST=$(grep "^DHIS2_IMAGE_DIGEST=" "$CANDIDATE_ENV" | cut -d= -f2-)
        SIM_CLASS=$(grep "^SIMULATION_CLASS=" "$CANDIDATE_ENV" | cut -d= -f2-)
        PERF_GIT_BRANCH=$(grep "^GIT_BRANCH_PERFORMANCE_TESTS=" "$CANDIDATE_ENV" | cut -d= -f2-)
        PERF_GIT_COMMIT=$(grep "^GIT_COMMIT_PERFORMANCE_TESTS=" "$CANDIDATE_ENV" | cut -d= -f2-)
        WARMUP_COUNT=$(grep "^WARMUP=" "$CANDIDATE_ENV" | cut -d= -f2-)
        MVN_ARGS_VALUE=$(grep "^MVN_ARGS=" "$CANDIDATE_ENV" | cut -d= -f2-)
        PROF_ARGS_VALUE=$(grep "^PROF_ARGS=" "$CANDIDATE_ENV" | cut -d= -f2-)
        CAPTURE_SQL_LOGS_VALUE=$(grep "^CAPTURE_SQL_LOGS=" "$CANDIDATE_ENV" | cut -d= -f2-)
        DB_TYPE=$(grep "^DB_TYPE=" "$CANDIDATE_ENV" | cut -d= -f2-)
        DB_VERSION=$(grep "^DB_VERSION=" "$CANDIDATE_ENV" | cut -d= -f2-)

        # Parse baseline env (only for baseline-specific values)
        if [ -f "$BASELINE_ENV" ]; then
          BASELINE_IMAGE=$(grep "^DHIS2_IMAGE=" "$BASELINE_ENV" | cut -d= -f2-)
          BASELINE_VERSION=$(grep "^DHIS2_VERSION=" "$BASELINE_ENV" | cut -d= -f2-)
          BASELINE_BRANCH=$(grep "^DHIS2_BUILD_BRANCH=" "$BASELINE_ENV" | cut -d= -f2-)
          BASELINE_REVISION=$(grep "^DHIS2_BUILD_REVISION=" "$BASELINE_ENV" | cut -d= -f2-)
          BASELINE_DIGEST=$(grep "^DHIS2_IMAGE_DIGEST=" "$BASELINE_ENV" | cut -d= -f2-)
        fi

        echo "# 🚀 Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "## 📊 Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Parse baseline-specific values
        BASELINE_MVN_ARGS=$(grep "^MVN_ARGS=" "$BASELINE_ENV" | cut -d= -f2-)
        BASELINE_WARMUP=$(grep "^WARMUP=" "$BASELINE_ENV" | cut -d= -f2-)
        BASELINE_DB_TYPE=$(grep "^DB_TYPE=" "$BASELINE_ENV" | cut -d= -f2-)
        BASELINE_DB_VERSION=$(grep "^DB_VERSION=" "$BASELINE_ENV" | cut -d= -f2-)

        echo "**Common settings:**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "* **Simulation**: \`$SIM_CLASS\`" >> $GITHUB_STEP_SUMMARY
        echo "* **Performance tests git ref**: \`$PERF_GIT_BRANCH\` (\`$PERF_GIT_COMMIT\`)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "**Per-run settings:**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| | Baseline | Candidate |" >> $GITHUB_STEP_SUMMARY
        echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
        if [ -n "$BASELINE_MVN_ARGS" ] || [ -n "$MVN_ARGS_VALUE" ]; then
          echo "| **Maven arguments** | \`${BASELINE_MVN_ARGS:-none}\` | \`${MVN_ARGS_VALUE:-none}\` |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "| **Warmup iterations** | $BASELINE_WARMUP | $WARMUP_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| **Database** | \`$BASELINE_DB_TYPE\` / \`$BASELINE_DB_VERSION\` | \`$DB_TYPE\` / \`$DB_VERSION\` |" >> $GITHUB_STEP_SUMMARY
        if [ -n "$CAPTURE_SQL_LOGS_VALUE" ]; then
          echo "| **SQL logging** | enabled | enabled |" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "$PROF_ARGS_VALUE" ]; then
          echo "| **Profiler arguments** | \`$PROF_ARGS_VALUE\` | \`$PROF_ARGS_VALUE\` |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "**DHIS2 images:**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| | Baseline | Candidate |" >> $GITHUB_STEP_SUMMARY
        echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
        echo "| **Image** | \`$BASELINE_IMAGE\` | \`$CANDIDATE_IMAGE\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **DHIS2_VERSION** | \`$BASELINE_VERSION\` | \`$CANDIDATE_VERSION\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **DHIS2_BUILD_BRANCH** | \`$BASELINE_BRANCH\` | \`$CANDIDATE_BRANCH\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **DHIS2_BUILD_REVISION** | \`$BASELINE_REVISION\` | \`$CANDIDATE_REVISION\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Image Digest** | \`${BASELINE_DIGEST#*@}\` | \`${CANDIDATE_DIGEST#*@}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Complete baseline environment configuration</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "> **⚠️ Warning**: GitHub Actions removes quotes around arguments like \`MVN_ARGS\` and \`PROF_ARGS\`." >> $GITHUB_STEP_SUMMARY
        echo "> You may need to manually re-add quotes when copying this configuration." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "${{ inputs.baseline_env }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Complete candidate environment configuration</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "> **⚠️ Warning**: GitHub Actions removes quotes around arguments like \`MVN_ARGS\` and \`PROF_ARGS\`." >> $GITHUB_STEP_SUMMARY
        echo "> You may need to manually re-add quotes when copying this configuration." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "${{ inputs.candidate_env }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "## 📥 Download Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Use GitHub CLI to download the performance test results:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Download this run's data:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "gh run download ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Download latest run's data for current branch:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "gh run download \$(gh run list --workflow=\"Performance tests\" --branch=\"\$(git branch --show-current)\" --limit=1 --json databaseId --jq '.[0].databaseId')" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "## 📊 View Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Results are in \`gatling-report-${{ github.run_id }}-${{ github.sha }}/\` with subdirectories:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "* **Baseline warmup runs** (if WARMUP > 0): \`<simulation-class>-<timestamp>-baseline-warmup-<number>/\`" >> $GITHUB_STEP_SUMMARY
        echo "* **Baseline**: \`<simulation-class>-<timestamp>-baseline/\`" >> $GITHUB_STEP_SUMMARY
        echo "* **Candidate warmup runs** (if WARMUP > 0): \`<simulation-class>-<timestamp>-candidate-warmup-<number>/\`" >> $GITHUB_STEP_SUMMARY
        echo "* **Candidate**: \`<simulation-class>-<timestamp>-candidate/\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Each directory contains:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "* \`index.html\` - Gatling HTML report" >> $GITHUB_STEP_SUMMARY
        echo "* \`run-simulation.env\` - Complete test run metadata (read it on how to reproduce this run)" >> $GITHUB_STEP_SUMMARY
        echo "* \`simulation.log\` - Binary Gatling test data (response times, etc.)" >> $GITHUB_STEP_SUMMARY
        echo "* \`simulation.csv\` - Parsed binary data in CSV format (requires [glog](https://github.com/dhis2/gatling/releases) and can be analyzed using [gatling-statistics](https://github.com/dhis2/gatling-statistics))" >> $GITHUB_STEP_SUMMARY
        echo "* \`profile.html\` - Flamegraph visualization (if profiling enabled)" >> $GITHUB_STEP_SUMMARY
        echo "* \`profile.jfr\` - JFR profiler data (if profiling enabled)" >> $GITHUB_STEP_SUMMARY
        echo "* \`profile.collapsed\` - Collapsed stack traces (if profiling enabled)" >> $GITHUB_STEP_SUMMARY
        echo "* \`postgresql.log\` - PostgreSQL query logs (if SQL logging enabled)" >> $GITHUB_STEP_SUMMARY
        echo "* \`pgbadger.html\` - SQL log analysis report (if SQL logging enabled)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "## 🖥️ Environment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Tests ran on self-hosted runner with the following specifications:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "* **CPU**: Intel(R) Xeon(R) CPU E3-1275 v6 @ 3.80GHz (8 core)" >> $GITHUB_STEP_SUMMARY
        echo "* **Memory**: 64GiB System Memory" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "## 🔄 Reproduce this run" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### On GitHub" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Either re-run this workflow from the [GitHub UI](https://github.com/dhis2/dhis2-core/actions/workflows/run-performance-tests.yml) or use GitHub CLI:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Method 1: Using generated run-simulation.env files (recommended for exact reproduction)**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download the artifacts and use the @ syntax to pass files directly:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
        echo "gh workflow run run-performance-tests.yml \\" >> $GITHUB_STEP_SUMMARY
        echo "  --field perf_tests_git_ref=\"$PERF_GIT_COMMIT\" \\" >> $GITHUB_STEP_SUMMARY
        echo "  --field baseline_env=@baseline-dir/run-simulation.env \\" >> $GITHUB_STEP_SUMMARY
        echo "  --field candidate_env=@candidate-dir/run-simulation.env \\" >> $GITHUB_STEP_SUMMARY
        echo "  --ref $PERF_GIT_COMMIT" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Method 2: Using input configurations from this run**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "See the 'Input Configurations' section above for the exact baseline_env and candidate_env values used." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### Locally" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Run this locally in the [https://github.com/dhis2/dhis2-core](https://github.com/dhis2/dhis2-core) repo in the \`dhis-2/dhis-test-performance\` directory:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Extract COMMAND_IMMUTABLE from baseline env
        BASELINE_COMMAND_IMMUTABLE=$(grep "^COMMAND_IMMUTABLE=" "$BASELINE_ENV" | cut -d= -f2-)
        echo "**Baseline:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
        echo "git checkout $PERF_GIT_COMMIT && $BASELINE_COMMAND_IMMUTABLE" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Extract COMMAND_IMMUTABLE from candidate env
        CANDIDATE_COMMAND_IMMUTABLE=$(grep "^COMMAND_IMMUTABLE=" "$CANDIDATE_ENV" | cut -d= -f2-)
        echo "**Candidate:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`sh" >> $GITHUB_STEP_SUMMARY
        echo "git checkout $PERF_GIT_COMMIT && $CANDIDATE_COMMAND_IMMUTABLE" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

